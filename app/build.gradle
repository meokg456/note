plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.devtools.ksp' version "1.6.21-1.0.5"
    id("dagger.hilt.android.plugin")
    id "com.google.protobuf" version "0.8.17"
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.meokg456.note"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner = "com.meokg456.note.CustomTestRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    testOptions {
        unitTests.includeAndroidResources = true
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }
    namespace 'com.meokg456.note'
}
ext {
    lifecycle_version = "2.4.1"
    arch_version = "2.1.0"
    roomVersion = "2.4.2"
    paging_version = "3.1.1"
    junitVersion = '4.13.2'
    coreTestingVersion = '1.4.0-rc01'
    mockitoVersion = '4.5.1'
    mockitoKotlinVersion = '4.0.0'
    mockkVersion = '1.12.4'
    coreArchTestingVersion = '2.1.0'
    coroutinesVersion = '1.6.1'
    espressoVersion = '3.4.0'
    testExtJunit = '1.1.3'
    uiAutomatorVersion = '2.2.0'
    workVersion = '2.7.1'
    truthVersion = '1.1.3'

}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.compose.material:material:1.1.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.2'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "junit:junit:$junitVersion"
    // Optional -- Robolectric environment
    testImplementation "androidx.test:core:$coreTestingVersion"
    androidTestImplementation "androidx.test:core:$coreTestingVersion"
    // Optional -- Mockito framework
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    androidTestImplementation "org.mockito:mockito-core:$mockitoVersion"
    // Optional -- mockito-kotlin
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    androidTestImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    // Optional -- Mockk framework
    testImplementation "io.mockk:mockk:$mockkVersion"
    androidTestImplementation "io.mockk:mockk:$mockkVersion"
    implementation("com.google.dagger:hilt-android:2.41")
    kapt("com.google.dagger:hilt-android-compiler:2.41")

    testImplementation 'org.robolectric:robolectric:4.4'
    androidTestImplementation 'org.robolectric:robolectric:4.4'
    // For Robolectric tests.
    testImplementation("com.google.dagger:hilt-android-testing:2.41")
    // ...with Kotlin.
    kaptTest("com.google.dagger:hilt-android-compiler:2.41")
    // ...with Java.
    testAnnotationProcessor("com.google.dagger:hilt-android-compiler:2.41")


    // For instrumented tests.
    androidTestImplementation("com.google.dagger:hilt-android-testing:2.41")
    // ...with Kotlin.
    kaptAndroidTest("com.google.dagger:hilt-android-compiler:2.41")
    // ...with Java.
    androidTestAnnotationProcessor("com.google.dagger:hilt-android-compiler:2.41")
    // ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version")
    // ViewModel utilities for Compose
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version")
    // LiveData
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version")
    // Lifecycles only (without ViewModel or LiveData)
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version")

    // Saved state module for ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version")

    // Annotation processor
    kapt("androidx.lifecycle:lifecycle-compiler:$lifecycle_version")

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")
    //ROOM
    implementation("androidx.room:room-runtime:$roomVersion")
    annotationProcessor("androidx.room:room-compiler:$roomVersion")

    // To use Kotlin Symbolic Processing (KSP)
    ksp("androidx.room:room-compiler:$roomVersion")

    // optional - Paging 3 Integration
    implementation("androidx.room:room-paging:2.4.2")

    implementation("androidx.paging:paging-runtime-ktx:$paging_version")

    // alternatively - without Android dependencies for tests
    testImplementation("androidx.paging:paging-common-ktx:$paging_version")
    androidTestImplementation("androidx.paging:paging-common-ktx:$paging_version")

    implementation("androidx.datastore:datastore-preferences:1.0.0")
    implementation "androidx.datastore:datastore-core:1.0.0"
    implementation "com.google.protobuf:protobuf-javalite:3.18.0"

    // Kotlin + coroutines
    implementation("androidx.work:work-runtime-ktx:$work_version")

    implementation("androidx.hilt:hilt-work:1.0.0")
    // When using Kotlin.
    kapt("androidx.hilt:hilt-compiler:1.0.0")
    // When using Java.
    annotationProcessor("androidx.hilt:hilt-compiler:1.0.0")

    testImplementation "androidx.arch.core:core-testing:$coreArchTestingVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$coreArchTestingVersion"
//    testImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
//    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
//    testImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
//    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
//    testImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
//    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    testImplementation "androidx.test.ext:junit:$testExtJunit"
    androidTestImplementation "androidx.test.ext:junit:$testExtJunit"
    testImplementation "androidx.test.uiautomator:uiautomator:$uiAutomatorVersion"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$uiAutomatorVersion"
    testImplementation "androidx.work:work-testing:$workVersion"
    androidTestImplementation "androidx.work:work-testing:$workVersion"
    testImplementation "com.google.truth:truth:$truthVersion"
    androidTestImplementation "com.google.truth:truth:$truthVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    androidTestImplementation('androidx.test:runner:1.4.0')
    androidTestImplementation('androidx.test:rules:1.4.0')

}
kapt {
    correctErrorTypes = true
}
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.14.0"
    }

    // Generates the java Protobuf-lite code for the Protobufs in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}